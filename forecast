# --- Imports ---
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler

# --- Load Data ---
@st.cache_data

def load_data():
    df = pd.read_csv("reuters_fx_data.csv")
    df["Date"] = pd.to_datetime(df["Date"])
    return df.sort_values("Date")

df = load_data()

# --- Tab Layout ---
tabs = st.tabs(["Overview", "Thresholds", "Cross Simulation", "Smile Threshold", "Smile Visuals", "Recalibration Simulation", "Live Forecast"])

with tabs[6]:
    st.header("Live FX Rate Forecasting: Random Forest vs LSTM")

    # Currency selection
    currencies = df["Currency"].unique().tolist()
    selected_currency = st.selectbox("Select Currency", currencies, key="forecast_ccy")

    df_ccy = df[df["Currency"] == selected_currency].copy()
    df_ccy = df_ccy.set_index("Date")
    df_ccy = df_ccy[["Close"]].dropna()

    # --- Data Preprocessing ---
    def create_sequences(data, window):
        X, y = [], []
        for i in range(len(data) - window):
            X.append(data[i:i+window])
            y.append(data[i+window])
        return np.array(X), np.array(y)

    # Normalize
    scaler = MinMaxScaler()
    df_scaled = scaler.fit_transform(df_ccy)

    WINDOW_SIZE = 30
    X, y = create_sequences(df_scaled, WINDOW_SIZE)
    X_rf = X.reshape(X.shape[0], -1)  # Flattened for RF
    X_lstm = X.reshape(X.shape[0], X.shape[1], 1)  # 3D for LSTM

    split_idx = int(len(X) * 0.8)
    X_rf_train, X_rf_test = X_rf[:split_idx], X_rf[split_idx:]
    X_lstm_train, X_lstm_test = X_lstm[:split_idx], X_lstm[split_idx:]
    y_train, y_test = y[:split_idx], y[split_idx:]

    # --- Model Training ---
    # Random Forest
    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model.fit(X_rf_train, y_train.ravel())
    y_pred_rf = rf_model.predict(X_rf_test)

    # LSTM
    lstm_model = Sequential()
    lstm_model.add(LSTM(64, return_sequences=False, input_shape=(WINDOW_SIZE, 1)))
    lstm_model.add(Dropout(0.2))
    lstm_model.add(Dense(1))
    lstm_model.compile(optimizer="adam", loss="mse")
    lstm_model.fit(X_lstm_train, y_train, epochs=30, batch_size=16, verbose=0)
    y_pred_lstm = lstm_model.predict(X_lstm_test).ravel()

    # --- Inverse scale ---
    def inverse_transform(series):
        reshaped = series.reshape(-1, 1) if len(series.shape) == 1 else series
        return scaler.inverse_transform(reshaped).flatten()

    y_true = inverse_transform(y_test)
    y_rf = inverse_transform(y_pred_rf)
    y_lstm = inverse_transform(y_pred_lstm)

    # --- Performance ---
    rmse_rf = np.sqrt(mean_squared_error(y_true, y_rf))
    rmse_lstm = np.sqrt(mean_squared_error(y_true, y_lstm))

    st.subheader("Model RMSE")
    st.metric("Random Forest", f"{rmse_rf:.4f}")
    st.metric("LSTM", f"{rmse_lstm:.4f}")

    # --- Plot ---
    test_dates = df_ccy.index[WINDOW_SIZE + split_idx:WINDOW_SIZE + split_idx + len(y_true)]

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=test_dates, y=y_true, name="Actual", line=dict(color="black")))
    fig.add_trace(go.Scatter(x=test_dates, y=y_rf, name="Random Forest", line=dict(color="blue")))
    fig.add_trace(go.Scatter(x=test_dates, y=y_lstm, name="LSTM", line=dict(color="red")))

    fig.update_layout(title=f"{selected_currency} FX Rate Forecast: Actual vs Model Predictions",
                      xaxis_title="Date", yaxis_title="FX Rate", legend_title="Model")
    st.plotly_chart(fig, use_container_width=True)
