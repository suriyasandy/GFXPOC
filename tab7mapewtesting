with tabs[6]:
    st.header("Live FX Rate Forecasting: Random Forest vs LSTM")

    tab7_sub1, tab7_sub2 = st.tabs(["Base Forecasting", "Shocked Forecasting"])

    def run_forecast(df_input, label_suffix=""):
        currencies = df_input["Currency"].unique().tolist()
        selected_currency = st.selectbox(f"Select Currency {label_suffix}", currencies, key=f"forecast_ccy{label_suffix}")

        df_ccy = df_input[df_input["Currency"] == selected_currency].copy()
        df_ccy = df_ccy.set_index("Date")
        df_ccy = df_ccy[["Close"]].dropna()

        def create_sequences(data, window):
            X, y = [], []
            for i in range(len(data) - window):
                X.append(data[i:i+window])
                y.append(data[i+window])
            return np.array(X), np.array(y)

        from sklearn.preprocessing import MinMaxScaler
        from sklearn.ensemble import RandomForestRegressor
        from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error
        from keras.models import Sequential
        from keras.layers import LSTM, Dropout, Dense

        scaler = MinMaxScaler()
        df_scaled = scaler.fit_transform(df_ccy)

        WINDOW_SIZE = 30
        X, y = create_sequences(df_scaled, WINDOW_SIZE)
        X_rf = X.reshape(X.shape[0], -1)
        X_lstm = X.reshape(X.shape[0], X.shape[1], 1)

        split_idx = int(len(X) * 0.8)
        X_rf_train, X_rf_test = X_rf[:split_idx], X_rf[split_idx:]
        X_lstm_train, X_lstm_test = X_lstm[:split_idx], X_lstm[split_idx:]
        y_train, y_test = y[:split_idx], y[split_idx:]

        rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
        rf_model.fit(X_rf_train, y_train.ravel())
        y_pred_rf = rf_model.predict(X_rf_test)

        lstm_model = Sequential()
        lstm_model.add(LSTM(64, return_sequences=False, input_shape=(WINDOW_SIZE, 1)))
        lstm_model.add(Dropout(0.2))
        lstm_model.add(Dense(1))
        lstm_model.compile(optimizer="adam", loss="mse")
        lstm_model.fit(X_lstm_train, y_train, epochs=30, batch_size=16, verbose=0)
        y_pred_lstm = lstm_model.predict(X_lstm_test).ravel()

        def inverse_transform(series):
            reshaped = series.reshape(-1, 1) if len(series.shape) == 1 else series
            return scaler.inverse_transform(reshaped).flatten()

        y_true = inverse_transform(y_test)
        y_rf = inverse_transform(y_pred_rf)
        y_lstm = inverse_transform(y_pred_lstm)

        mape_rf = mean_absolute_percentage_error(y_true, y_rf) * 100
        mape_lstm = mean_absolute_percentage_error(y_true, y_lstm) * 100
        mae_rf = mean_absolute_error(y_true, y_rf)
        mae_lstm = mean_absolute_error(y_true, y_lstm)
        rmse_rf = np.sqrt(mean_squared_error(y_true, y_rf))
        rmse_lstm = np.sqrt(mean_squared_error(y_true, y_lstm))

        st.subheader(f"Model Deviation Thresholds {label_suffix}")
        metrics_df = pd.DataFrame({
            "Model": ["Random Forest", "LSTM"],
            "MAPE (%)": [mape_rf, mape_lstm],
            "MAE": [mae_rf, mae_lstm],
            "RMSE": [rmse_rf, rmse_lstm]
        })
        st.dataframe(metrics_df, use_container_width=True)

        st.markdown(f"""
        **Threshold Interpretation Example (for {selected_currency}):**
        - If a deal deviates more than **MAPE%** from forecasted market rate, flag as **off-market**.
        - Deviation (%) = |Deal - Market| / Market × 100
        - RF MAPE Threshold: **±{mape_rf:.2f}%**, LSTM MAPE Threshold: **±{mape_lstm:.2f}%**
        """)

        test_dates = df_ccy.index[WINDOW_SIZE + split_idx:WINDOW_SIZE + split_idx + len(y_true)]

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=test_dates, y=y_true, name="Actual", line=dict(color="black")))
        fig.add_trace(go.Scatter(x=test_dates, y=y_rf, name="Random Forest", line=dict(color="blue")))
        fig.add_trace(go.Scatter(x=test_dates, y=y_lstm, name="LSTM", line=dict(color="red")))
        fig.update_layout(title=f"{selected_currency} FX Rate Forecast {label_suffix}",
                          xaxis_title="Date", yaxis_title="FX Rate", legend_title="Model")
        st.plotly_chart(fig, use_container_width=True)

    with tab7_sub1:
        run_forecast(df, label_suffix="(Original)")

    with tab7_sub2:
        test_df = pd.read_csv("reuters_gfx_test_data.csv")
        test_df["Date"] = pd.to_datetime(test_df["Date"])
        run_forecast(test_df.rename(columns={"Close_Shocked": "Close"}), label_suffix="(Shocked)")
