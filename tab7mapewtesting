import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Tab 7: Live FX Rate Forecasting
with tab7:
    st.header("Live FX Rate Forecasting: Random Forest vs LSTM")

    tab7_sub1, tab7_sub2 = st.tabs(["Standard Forecast", "Model Forecast on Shocked Data"])

    def create_sequences(data, window):
        X, y = [], []
        for i in range(len(data) - window):
            X.append(data[i:i+window])
            y.append(data[i+window])
        return np.array(X), np.array(y)

    def inverse_transform(series, scaler):
        reshaped = series.reshape(-1, 1) if len(series.shape) == 1 else series
        return scaler.inverse_transform(reshaped).flatten()

    WINDOW_SIZE = 30

    with tab7_sub1:
        currencies = df["Currency"].unique().tolist()
        selected_currency = st.selectbox("Select Currency", currencies, key="forecast_ccy")

        df_ccy = df[df["Currency"] == selected_currency].copy()
        df_ccy = df_ccy.set_index("Date")
        df_ccy = df_ccy[["Close"]].dropna()

        scaler = MinMaxScaler()
        df_scaled = scaler.fit_transform(df_ccy)

        X, y = create_sequences(df_scaled, WINDOW_SIZE)
        X_rf = X.reshape(X.shape[0], -1)
        X_lstm = X.reshape(X.shape[0], X.shape[1], 1)

        split_idx = int(len(X) * 0.8)
        X_rf_train, X_rf_test = X_rf[:split_idx], X_rf[split_idx:]
        X_lstm_train, X_lstm_test = X_lstm[:split_idx], X_lstm[split_idx:]
        y_train, y_test = y[:split_idx], y[split_idx:]

        rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
        rf_model.fit(X_rf_train, y_train.ravel())
        y_pred_rf = rf_model.predict(X_rf_test)

        lstm_model = Sequential()
        lstm_model.add(LSTM(64, return_sequences=False, input_shape=(WINDOW_SIZE, 1)))
        lstm_model.add(Dropout(0.2))
        lstm_model.add(Dense(1))
        lstm_model.compile(optimizer="adam", loss="mse")
        lstm_model.fit(X_lstm_train, y_train, epochs=30, batch_size=16, verbose=0)
        y_pred_lstm = lstm_model.predict(X_lstm_test).ravel()

        y_true = inverse_transform(y_test, scaler)
        y_rf = inverse_transform(y_pred_rf, scaler)
        y_lstm = inverse_transform(y_pred_lstm, scaler)

        rmse_rf = np.sqrt(mean_squared_error(y_true, y_rf))
        rmse_lstm = np.sqrt(mean_squared_error(y_true, y_lstm))

        st.subheader("Model RMSE")
        st.metric("Random Forest", f"{rmse_rf:.4f}")
        st.metric("LSTM", f"{rmse_lstm:.4f}")

        test_dates = df_ccy.index[WINDOW_SIZE + split_idx:WINDOW_SIZE + split_idx + len(y_true)]

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=test_dates, y=y_true, name="Actual", line=dict(color="black")))
        fig.add_trace(go.Scatter(x=test_dates, y=y_rf, name="Random Forest", line=dict(color="blue")))
        fig.add_trace(go.Scatter(x=test_dates, y=y_lstm, name="LSTM", line=dict(color="red")))

        fig.update_layout(title=f"{selected_currency} FX Rate Forecast: Actual vs Model Predictions",
                          xaxis_title="Date", yaxis_title="FX Rate", legend_title="Model")
        st.plotly_chart(fig, use_container_width=True)

    with tab7_sub2:
        st.subheader("Forecast on Shocked Data")
        try:
            test_df = pd.read_csv("reuters_gfx_test_data.csv")
            test_df["Date"] = pd.to_datetime(test_df["Date"])
            test_ccy = test_df[test_df["Currency"] == selected_currency].copy()
            test_ccy = test_ccy.set_index("Date")
            test_ccy = test_ccy[["Close_Shocked"]].dropna()

            test_scaled = scaler.fit_transform(test_ccy)
            X_test, y_test = create_sequences(test_scaled, WINDOW_SIZE)
            X_rf_test = X_test.reshape(X_test.shape[0], -1)
            X_lstm_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

            y_pred_rf = rf_model.predict(X_rf_test)
            y_pred_lstm = lstm_model.predict(X_lstm_test).ravel()

            y_true = inverse_transform(y_test, scaler)
            y_rf = inverse_transform(y_pred_rf, scaler)
            y_lstm = inverse_transform(y_pred_lstm, scaler)

            mape_rf = np.mean(np.abs((y_true - y_rf) / y_true)) * 100
            mape_lstm = np.mean(np.abs((y_true - y_lstm) / y_true)) * 100
            mae_rf = mean_absolute_error(y_true, y_rf)
            mae_lstm = mean_absolute_error(y_true, y_lstm)
            rmse_rf = np.sqrt(mean_squared_error(y_true, y_rf))
            rmse_lstm = np.sqrt(mean_squared_error(y_true, y_lstm))

            st.markdown(f"**Random Forest MAPE%:** {mape_rf:.2f}%  |  **MAE:** {mae_rf:.4f}  |  **RMSE:** {rmse_rf:.4f}")
            st.markdown(f"**LSTM MAPE%:** {mape_lstm:.2f}%  |  **MAE:** {mae_lstm:.4f}  |  **RMSE:** {rmse_lstm:.4f}")

            test_dates = test_ccy.index[WINDOW_SIZE:WINDOW_SIZE + len(y_true)]

            fig = go.Figure()
            fig.add_trace(go.Scatter(x=test_dates, y=y_true, name="Actual Shocked", line=dict(color="black")))
            fig.add_trace(go.Scatter(x=test_dates, y=y_rf, name="Random Forest", line=dict(color="blue")))
            fig.add_trace(go.Scatter(x=test_dates, y=y_lstm, name="LSTM", line=dict(color="red")))

            fig.update_layout(title=f"{selected_currency} Forecast vs Shocked Market (Test Data)",
                              xaxis_title="Date", yaxis_title="FX Rate", legend_title="Model")
            st.plotly_chart(fig, use_container_width=True)

            st.markdown("""
            - Use MAPE% as a primary threshold: flag trades where deviation > MAPE.
            - Secondary fallback: use MAE or RMSE thresholds depending on business preference.
            """)
        except Exception as e:
            st.error("Shocked test data not available or error in processing. Please generate in Tab 6.")
