# --- Part 1: App Setup, Imports, and Data Loader ---
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from scipy.stats import genpareto
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import ta  # For technical indicators

ROLL_WINDOW = 60
ANNUALIZE = np.sqrt(252)
PCT_THRESHOLD = 0.95
EVT_TAIL_PCT = 0.99
SHOCK_VALUES = [0, 10, 25, 50, 100]

# Load and preprocess FX OHLC + compute indicators
@st.cache_data
def load_fx_data():
    df = pd.read_csv("reuters_fx_data.csv")
    df['Date'] = pd.to_datetime(df['Date'])
    df.sort_values(['Currency', 'Date'], inplace=True)
    
    # Group by Currency and apply indicators
    result = []
    for ccy, group in df.groupby('Currency'):
        group = group.copy()
        group['LogReturn'] = np.log(group['Close'] / group['Close'].shift(1))
        group['Volatility'] = group['LogReturn'].rolling(ROLL_WINDOW).std() * ANNUALIZE
        group['RSI'] = ta.momentum.RSIIndicator(close=group['Close'], window=14).rsi()
        group['MACD'] = ta.trend.MACD(close=group['Close']).macd()
        group['BBWidth'] = ta.volatility.BollingerBands(close=group['Close']).bollinger_wband()
        result.append(group)
    
    df_full = pd.concat(result).dropna().reset_index(drop=True)
    return df_full

# Manual threshold bands
MANUAL_BANDS = [(0.0, 0.07), (0.07, 0.5), (0.5, 0.6), (0.6, float("inf"))]
MANUAL_THRESHOLDS = [0.10, 0.40, 0.70, 1.30]

def assign_manual_threshold(vol):
    for (low, high), th in zip(MANUAL_BANDS, MANUAL_THRESHOLDS):
        if low <= vol < high:
            return th
    return MANUAL_THRESHOLDS[-1]
# --- Part 2: Threshold Calculations ---

# Rolling statistical threshold (95th percentile)
def calc_stat_threshold(vol_series):
    return vol_series.quantile(PCT_THRESHOLD)

# EVT threshold (Peaks Over Threshold method)
def calc_evt_threshold(vol_series):
    threshold = vol_series.quantile(EVT_TAIL_PCT)
    tail_data = vol_series[vol_series > threshold] - threshold
    if len(tail_data) < 10:
        return threshold  # Not enough data to fit
    params = genpareto.fit(tail_data)
    return threshold + genpareto.ppf(0.995, *params)

# Placeholder for GARCH (to be implemented using arch library if needed)
def calc_garch_forecast(vol_series):
    return vol_series.mean() * 1.25  # Dummy multiplier; replace with GARCH forecast later

# Apply thresholds per currency
def compute_thresholds_per_currency(df):
    records = []
    for ccy, group in df.groupby("Currency"):
        recent_vols = group["Volatility"]
        stat_th = calc_stat_threshold(recent_vols)
        evt_th = calc_evt_threshold(recent_vols)
        garch_th = calc_garch_forecast(recent_vols)
        avg_vol = recent_vols.mean()
        manual_th = assign_manual_threshold(avg_vol)
        records.append({
            "Currency": ccy,
            "ManualThreshold": manual_th,
            "StatThreshold": stat_th,
            "EVTThreshold": evt_th,
            "GARCHThreshold": garch_th,
            "AvgVol": avg_vol
        })
    return pd.DataFrame(records)
# --- Part 3: Cross-Currency Synthetic Thresholding and Shock Simulation ---

def compute_synthetic_threshold(base_vol, quote_vol):
    return np.sqrt(base_vol**2 + quote_vol**2)

def get_latest_vol(df, ccy):
    df_ccy = df[df["Currency"] == ccy].copy()
    return df_ccy["Volatility"].iloc[-1]

def simulate_shock_threshold(base_vol, quote_vol, base_shock=0, quote_shock=0):
    shocked_base = base_vol * (1 + base_shock / 100)
    shocked_quote = quote_vol * (1 + quote_shock / 100)
    return compute_synthetic_threshold(shocked_base, shocked_quote)

# Function to return shock scenario DataFrame
def generate_shock_table(base_vol, quote_vol):
    rows = []
    for bshock in SHOCK_VALUES:
        for qshock in SHOCK_VALUES:
            shocked_thresh = simulate_shock_threshold(base_vol, quote_vol, bshock, qshock)
            rows.append({
                "Base Shock %": bshock,
                "Quote Shock %": qshock,
                "Synthetic Threshold": shocked_thresh
            })
    return pd.DataFrame(rows)
# --- Part 4: ML Model (Random Forest) + SHAP Explainability ---

import shap

@st.cache_resource
def train_rf_model(df):
    features = ["Volatility", "RSI", "MACD", "BBWidth"]
    df = df.dropna(subset=features)
    df["HighVolFlag"] = df["Volatility"] > df.groupby("Currency")["Volatility"].transform(lambda x: x.quantile(PCT_THRESHOLD))
    
    X = df[features]
    y = df["HighVolFlag"].astype(int)
    X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.3, random_state=42)

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train_scaled, y_train)

    return model, scaler, X_test, X_test_scaled, y_test

def explain_model_shap(model, X_sample):
    explainer = shap.Explainer(model)
    shap_values = explainer(X_sample)
    return shap_values

def predict_and_explain(df, model, scaler):
    features = ["Volatility", "RSI", "MACD", "BBWidth"]
    df = df.dropna(subset=features).copy()
    df["VolFlag_RF"] = model.predict(scaler.transform(df[features]))
    return df
# --- Part 5: Streamlit UI Assembly ---

df = load_fx_data()
st.set_page_config(layout="wide")
st.title("FX Volatility Thresholding: Hybrid ML + Statistical App")

tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "Overview",
    "Per-Currency Thresholds",
    "Cross-Currency Shock Simulation",
    "ML Flags + SHAP",
    "Explainability"
])

# --- Tab 1: Overview ---
with tab1:
    st.header("Business Rationale")
    st.markdown("""
    - Manual thresholds are rigid and miss key spikes.
    - We replace them with dynamic, explainable thresholds:
      - 95th percentile (statistical)
      - EVT (tail-fit)
      - GARCH (forecast)
      - Random Forest with SHAP explanations
    """)

# --- Tab 2: Thresholds ---
with tab2:
    st.header("Per-Currency Threshold View")
    df_summary = compute_thresholds_per_currency(df)
    st.dataframe(df_summary.style.format("{:.4f}"))

# --- Tab 3: Cross-Currency Simulation ---
with tab3:
    st.header("Cross-Currency Threshold Simulation")
    currencies = df["Currency"].unique().tolist()
    base = st.selectbox("Base Currency", currencies, key="base")
    quote = st.selectbox("Quote Currency", currencies, key="quote")

    base_vol = get_latest_vol(df, base)
    quote_vol = get_latest_vol(df, quote)
    st.metric(f"{base} Vol", f"{base_vol:.4f}")
    st.metric(f"{quote} Vol", f"{quote_vol:.4f}")

    table = generate_shock_table(base_vol, quote_vol)
    st.dataframe(table.style.format("{:.4f}"))

# --- Tab 4: ML Flags ---
with tab4:
    st.header("ML-Based Flagging")
    model, scaler, X_test, X_test_scaled, y_test = train_rf_model(df)
    flagged_df = predict_and_explain(df, model, scaler)
    st.dataframe(flagged_df[["Currency", "Date", "Volatility", "RSI", "MACD", "BBWidth", "VolFlag_RF"]].tail(10))

# --- Tab 5: Explainability ---
with tab5:
    st.header("Why was this flagged?")
    shap.initjs()
    sample = X_test.sample(1, random_state=42)
    shap_values = explain_model_shap(model, sample)
    st.write("**Sample Explanation:**")
    st.dataframe(sample)
    st.write("SHAP Feature Contributions")
    st.pyplot(shap.plots.waterfall(shap_values[0], show=False))
# --- Part 6: Utilities and Constants (Boot Logic) ---

# Constants (already declared earlier but re-definable here if modular)
# ROLL_WINDOW = 60
# ANNUALIZE = np.sqrt(252)
# PCT_THRESHOLD = 0.95
# EVT_TAIL_PCT = 0.99
# SHOCK_VALUES = [0, 10, 25, 50, 100]

# Reusable function for formatting metrics
def format_metric_row(label, value, threshold):
    delta = value - threshold
    return f"{label}: {value:.4f} | Threshold: {threshold:.4f} | Deviation: {delta:.4f}"

# Currency filter utility
def get_currency_df(df, currency):
    return df[df['Currency'] == currency].copy()

# Boot logic for running Streamlit
if __name__ == "__main__":
    st.sidebar.title("FX Thresholding Controls")
    st.sidebar.info("Select tabs above to explore thresholds, ML flags, and explanations.")
