with tab4:
    st.header("Final Thresholds & Forecast Accuracy")

    df_summary["FinalThreshold"] = df_summary[[
         "95th_Pct", "GARCH_Forecast", "EVT_Threshold"
    ]].max(axis=1)

    @st.cache_data
    def load_best_mape_summary():
        try:
            log_df = pd.read_csv("logs/model_feedback_log.csv")
            log_df["Currency"] = log_df["Currency"].str.strip().str.upper()
            df_summary["Currency"] = df_summary["Currency"].str.strip().str.upper()
            latest = log_df.sort_values("RunDate", ascending=False).drop_duplicates("Currency")
            return latest[["Currency", "Model", "MAPE", "RMSE"]].rename(
                columns={"MAPE": "Best_MAPE", "RMSE": "Best_RMSE"})
        except Exception as e:
            st.error(f"Error loading model summary: {e}")
            return pd.DataFrame(columns=["Currency", "Best_MAPE", "Model", "Best_RMSE"])

    selected_currency = st.selectbox("Select Currency", df["Currency"].unique(), index=None, key="tab4_currency")
    if selected_currency:
        best_mape_df = load_best_mape_summary()
        df_final = df_summary.merge(best_mape_df, on="Currency", how="left", validate="one_to_one")
        selected_currency = selected_currency.upper()
        row = df_final[df_final["Currency"] == selected_currency].iloc[0]

        st.subheader(f"{selected_currency}: Thresholds & Justification")
        st.markdown(f"""
        - **Avg Log-Return Volatility** (Dynamic): `{round(row['AvgVol'], 4)}`  
        - **Avg OHLC Realized Volatility** (Manual): `{round(row['AvgRealizedVol'], 4)}`  
        - **Manual Threshold**: `{round(row['ManualThreshold'], 4)}`  
        - **Final Dynamic Threshold**: `{round(row['FinalThreshold'], 4)}`  
        - **Best Forecasting Model**: `{row['Model']}`  
        - **MAPE**: `{round(row['Best_MAPE'], 2)}%`
        """)

        # Load last ROLL_WINDOW days only
        trend_df = df[df["Currency"] == selected_currency].copy().sort_values("Date").iloc[-ROLL_WINDOW:]
        y_actual = trend_df["Volatility"].values
        dates = trend_df["Date"]

        mape_pct = row["Best_MAPE"] / 100 if pd.notnull(row["Best_MAPE"]) else 0.05
        upper_band = y_actual * (1 + mape_pct)
        lower_band = y_actual * (1 - mape_pct)
        flag_mask = (y_actual > upper_band) | (y_actual < lower_band)

        # Confidence Interval (windowed)
        model_dict, _ = load_models(selected_currency)
        ci_upper, ci_lower, ci_dates = None, None, None
        if model_dict and row["Model"] in model_dict:
            try:
                series = trend_df["Close"].values.reshape(-1, 1)
                scaled = MinMaxScaler().fit_transform(series)
                X_seq, y_seq = create_sequences(scaled, window=ROLL_WINDOW)

                if row["Model"] == "LSTM":
                    preds = model_dict["LSTM"].predict(X_seq).ravel()
                else:
                    preds = model_dict[row["Model"]].predict(X_seq.reshape(X_seq.shape[0], -1))
                residuals = y_seq - preds
                resid_std = np.std(residuals)
                ci_upper = preds + 1.96 * resid_std
                ci_lower = preds - 1.96 * resid_std
                ci_dates = trend_df["Date"].iloc[-len(preds):]
            except Exception as e:
                st.warning("Confidence interval error: " + str(e))

        fig_vol = go.Figure()
        fig_vol.add_trace(go.Scatter(x=dates, y=y_actual, name="Actual Volatility", line=dict(color="white")))
        fig_vol.add_trace(go.Scatter(x=dates, y=upper_band, name="MAPE Upper Band", line=dict(dash="dot", color="green")))
        fig_vol.add_trace(go.Scatter(x=dates, y=lower_band, name="MAPE Lower Band", line=dict(dash="dot", color="green")))

        if ci_upper is not None:
            fig_vol.add_trace(go.Scatter(x=ci_dates, y=ci_upper, name="Stat Upper CI", line=dict(dash="dash", color="cyan")))
            fig_vol.add_trace(go.Scatter(x=ci_dates, y=ci_lower, name="Stat Lower CI", line=dict(dash="dash", color="cyan")))

        fig_vol.add_hline(y=row["ManualThreshold"], line_color="red", line_dash="dot", annotation_text="Manual")
        fig_vol.add_hline(y=row["FinalThreshold"], line_color="orange", line_dash="dash", annotation_text="Final Dynamic")

        fig_vol.add_trace(go.Scatter(
            x=dates[flag_mask], y=y_actual[flag_mask],
            mode="markers", name="Flagged Deviations",
            marker=dict(color="red", size=8, symbol="x")
        ))

        fig_vol.update_layout(
            title=f"{selected_currency}: Volatility vs Thresholds (Last {ROLL_WINDOW} Days)",
            xaxis_title="Date", yaxis_title="Annualized Volatility"
        )
        st.plotly_chart(fig_vol, use_container_width=True)
