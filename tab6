with tab6:
    st.header("Real-Time Recalibration Simulation")

    st.markdown("""
    This simulation shows how market volatility changes after **14 Oct 2024** (e.g. major economic events or FX swings)
    could render **manual thresholds** obsolete, while our **dynamic approach** adapts weekly.

    We simulate spikes in volatility from **15 Oct 2024 to 01 Nov 2024** for a few currencies (e.g. INR, JPY, GBP).
    """)

    # Step 1: Create synthetic test data
    @st.cache_data
    def create_test_dataset():
        df_base = pd.read_csv("reuters_fx_data.csv")
        df_base["Date"] = pd.to_datetime(df_base["Date"])
        df_base.sort_values(["Currency", "Date"], inplace=True)
        impacted = ["INR", "JPY", "GBP"]
        df_post = df_base[df_base["Date"] > "2024-10-14"].copy()
        df_post["Shock"] = df_post["Currency"].apply(lambda x: np.random.normal(1.5, 0.1) if x in impacted else 1.0)
        df_post["Volatility"] = df_post.groupby("Currency")["Close"].transform(lambda x: np.log(x).diff().rolling(ROLL_WINDOW).std()) * ANNUALIZE
        df_post["Volatility_Shocked"] = df_post["Volatility"] * df_post["Shock"]
        df_post.dropna().to_csv("reuters_gfx_test_data.csv", index=False)
        return "reuters_gfx_test_data.csv"

    test_file = create_test_dataset()

    # Step 2: Load shocked dataset
    df_test = pd.read_csv(test_file)
    df_test["Date"] = pd.to_datetime(df_test["Date"])

    # Step 3: Robust EVT calculation
    def safe_evt_threshold(x):
        tail = x[x > x.quantile(EVT_TAIL_PCT)]
        if len(tail) < 5:
            return np.nan
        params = genpareto.fit(tail)
        return genpareto.ppf(0.999, *params)

    # Step 4: Calculate recalibrated thresholds
    dynamic_recalibrated = df_test.groupby("Currency").agg(
        AvgVol_Shocked=("Volatility_Shocked", "mean"),
        New95thPct=("Volatility_Shocked", lambda x: x.quantile(PCT_THRESHOLD)),
        NewEVT=("Volatility_Shocked", safe_evt_threshold)
    ).reset_index()

    # Step 5: Merge and visualize
    merged = df_summary[["Currency", "ManualThreshold"]].merge(dynamic_recalibrated, on="Currency", how="inner")

    st.subheader("Comparison of Manual vs Recalibrated Thresholds")
    st.dataframe(merged, use_container_width=True)

    fig = px.bar(
        merged.melt(id_vars="Currency", value_vars=["ManualThreshold", "New95thPct", "NewEVT"]),
        x="Currency", y="value", color="variable", barmode="group",
        title="Manual vs Recalibrated Thresholds (Post-Volatility Shock)",
        labels={"value": "Threshold", "variable": "Method"}
    )
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("Insight")
    st.markdown("""
    - Manual thresholds stayed fixed despite market turbulence.
    - EVT and dynamic 95th percentile thresholds increased for affected currencies.
    - This supports the need for recalibration in real-time.
    - Our model would flag such changes and adapt automatically.
    """)
